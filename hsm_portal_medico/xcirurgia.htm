<!DOCTYPE html>
<head>
  <title>teste</title>
  <meta charset="utf-8" name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
  <link rel="icon" href="images/mielina.ico">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vuetify/1.0.3/vuetify.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue-resource/1.3.6/vue-resource.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vuetify/1.0.3/vuetify.min.js"></script>
  <!--script(src='https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js')-->
  <script src="js/jquery.min.js"></script>
  <script src="js/jquery.soap.js"></script>
  <script src="js/xml2json.js"></script>
</head>
<div id="vue_app">
  <v-app id="inspire"><span v-bind:title="message">Pare o mouse sobre mim e veja a dica interligada dinamicamente!</span><span>{{select}}</span><br><br>
    <v-container fluid="">
      <v-layout>
        <v-flex>
          <v-select label="Async items" autocomplete="" :loading="loading" cache-items="" required="" :items="items" :rules="[() =&gt; select.length &gt; 0 || 'You must choose at least one']" :search-input.sync="search" v-model="select"></v-select>
        </v-flex>
      </v-layout>
    </v-container>
    <v-data-table :headers="headers" :items="issues" hide-actions="" class="elevation-1">
      <template slot="items" slot-scope="issue">
        <td class="text-xs-right">{{ issue.item.codigo }}</td>
        <td>{{ issue.item.nome }}</td>
      </template>
    </v-data-table>
    <!--table.table.table-bordered
    tr(v-for="tes in teste")
        td {{tes.codigo}}
        td {{tes.nome}}
    -->
  </v-app>
  <script>
    new Vue({
      el: '#vue_app',
      data () {
        return {
          message: 'Você carregou esta página em ' + new Date().toLocaleString(), issues:[], teste:[],
          headers: [{text: 'Codigo', align: 'issue.item.', sortable: false, value: 'codigo'}, { text: 'Nome', value: 'nome' }],
          loading: false,items: [], search: null, select: [],
          states: ['Alabama', 'Alaska', 'American Samoa', 'Arizona', 'Arkansas', 'California', 'Colorado',
            'Connecticut', 'Delaware', 'District of Columbia', 'Federated States of Micronesia', 'Florida',
            'Georgia', 'Guam', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',
            'Louisiana', 'Maine', 'Marshall Islands', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
            'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',
            'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Northern Mariana Islands','Ohio',
            'Oklahoma', 'Oregon', 'Palau', 'Pennsylvania', 'Puerto Rico', 'Rhode Island', 'South Carolina',
            'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virgin Island', 'Virginia', 'Washington',
            'West Virginia', 'Wisconsin', 'Wyoming']
        }
      },
      watch: {
        search (val) {
          val && this.querySelections(val)
        }
      },
      methods: {
        querySelections (v) {
          this.loading = true
          // Simulated ajax query
          setTimeout(() => {
            this.items = this.states.filter(e => {
              return (e || '').toLowerCase().indexOf((v || '').toLowerCase()) > -1
            })
            this.loading = false
          }, 500)
        }
      },
      created: function() {
        this.$http.get("/dados/cis_ativos")
        .then((response)=>{
          this.issues=response.body.cis
        })
        $.soap({
          url: 'http://localhost/webservice/uf.asmx/',
          method: 'CarregarTodos',
          data: {},
          success: function (soapResponse) {
            console.dir(soapResponse.toJSON())
          },
          error: function (SOAPResponse) {
            console.dir(SOAPResponse)
          }
        })
        /*axios.get('/dados/cis_ativos')
        .then(function (response) {
          this.teste = response.data.cis
        })*/
      }
    })
  </script>
</div>